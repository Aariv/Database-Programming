1.  Introduction to Relational Database and SQL
===============================================
1.1  Relational Databases
A relational database organizes data in tables. A table has rows (or records) and columns (or fields).
Tables are related based on common columns to eliminate data redundancy and ensure data integrity.

Popular Relationship Database Management System (RDBMS) includes:
 the commercial Oracle, IBM DB2, Microsoft SQL Server and Access, SAP Hana.
 the open-source MySQL, PostgreSQL, mariaDB, Embedded Apache Derby (Java DB), mSQL (mini-SQL),
 SQLite, Apache OpenOffice's Base, and mongoDB (non-relational).

1.2  Structure Query Language (SQL)
 A high-level programming language, called Structure Query Language (SQL), is designed for interacting with the relational databases.
 SQL defines a set of commands, such as SELECT, INSERT, UPDATE, DELETE, CREATE TABLE, DROP TABLE, and etc.

 Edgar F. Codd of IBM proposed the Relational Database Model in 1970.
 SQL, one of the earlier programming language, was subsequently developed by Donald D. Chamberlin and Raymond F. Boyce at IBM in the early 1970s. Oracle, subsequently, took it to a new height.

1.3  SQL By Examples
 A relational database system organizes data in the following hierarchy:
 1. A relational database system contains many databases.
 2. A database comprises tables.
 3. A table have rows (or records) and columns (or fields).

Suppose we have a database called studentdb, a table called class101 in the database with 3 columns (id, name, gpa) and 4 rows as illustrated below.
Each column has a data type.
We choose: INT (integer) for column id, VARCHAR(50) (variable-length string of up to 50 characters) for name, and FLOAT (floating-point number) for gpa.

Database: studentdb
Table: class101
+-----------+--------------------+-------------+
| id (INT)  | name (VARCHAR(50)) | gpa (FLOAT) |
+-----------+--------------------+-------------+
|   1001    | Tan Ah Teck        |  4.5        |
|   1002    | Mohammed Ali       |  4.8        |
|   1003    | Kumar              |  4.8        |
|   1004    | Kevin Jones        |  4.6        |
+-----------+--------------------+-------------+

SQL (Structure Query Language) defines a set of intuitive commands (such as SELECT, INSERT, DELETE, UPDATE) to interact with relational database system.

SELECT

-- SYNTAX
SELECT column1, column2, ... FROM tableName WHERE criteria
SELECT * FROM tableName WHERE criteria

-- EXAMPLES
SELECT name, gpa FROM class101
 -- Select columns name and gpa from table class101.

   +--------------+------+
   | name         | gpa  |
   +--------------+------+
   | Tan Ah Teck  |  4.5 |
   | Mohammed Ali |  4.8 |
   | Kumar        |  4.8 |
   | Kevin Jones  |  4.6 |
   +--------------+------+ 

SELECT * FROM class101
 -- Select ALL columns from table class101.
 -- The wildcard * denotes all the columns.

   +------+--------------+------+
   | id   | name         | gpa  |
   +------+--------------+------+
   | 1001 | Tan Ah Teck  |  4.5 |
   | 1002 | Mohammed Ali |  4.8 |
   | 1003 | Kumar        |  4.8 |
   | 1004 | Kevin Jones  |  4.6 |
   +------+--------------+------+

SELECT name, gpa FROM class101 WHERE gpa >= 4.7
 -- Select columns name and gpa from table class101, where the rows meet the criterion (gpa >= 4.7)
 -- You can compare numbers (INT, FLOAT) using =, >, <, >=, <=, <> (!=)

   +--------------+------+
   | name         | gpa  |
   +--------------+------+
   | Mohammed Ali |  4.8 |
   | Kumar        |  4.8 |
   +--------------+------+

SELECT name, gpa FROM class101 WHERE name = 'Tan Ah Teck'
  -- Perform FULL-match on strings (= or !=). Strings are enclosed in quotes.

   +-------------+------+
   | name        | gpa  |
   +-------------+------+
   | Tan Ah Teck |  4.5 |
   +-------------+------+

SELECT name FROM class101 WHERE name LIKE 'k%'
 -- Use "LIKE" to perform pattern-matching on strings, with
 --   wildcard % matches zero or more (any) characters;
 --   wildcard _ matches one (any) character.

   +-------------+
   | name        |
   +-------------+
   | Kumar       |
   | Kevin Jones |
   +-------------+

SELECT * FROM class101 WHERE gpa > 4 AND name LIKE 'k%' ORDER BY gpa DESC, name ASC
 -- Use AND, OR, NOT to combine simple conditions.
 -- Order the result by gpa in descending order.
 -- If two rows have the same gpa, order by name in ascending order.

   +------+-------------+------+
   | id   | name        | gpa  |
   +------+-------------+------+
   | 1003 | Kumar       |  4.8 |
   | 1004 | Kevin Jones |  4.6 |
   +------+-------------+------+

DELETE
 -- SYNTAX
 DELETE FROM tableName WHERE criteria

 -- EXAMPLES
 DELETE FROM class101
  -- Delete ALL rows from the table class101! Beware that there is NO UNDO!
 DELETE FROM class101 WHERE id = 33
  -- Delete rows that meet the criteria.

INSERT
 -- SYNTAX
 INSERT INTO tableName VALUES (firstColumnValue, ..., lastColumnValue)       -- All columns
 INSERT INTO tableName (column1, column2, ...) VALUES (value1, value2, ...)  -- Selected Columns

 -- Example
 INSERT INTO class101 VALUES (1001, 'Tan Ah Teck', 4.5)
   -- List value of all columns.
 INSERT INTO class101 (name, gpa) VALUES ('Peter Jones', 4.55)
   -- Missing fields will be set to their default values or NULL

UPDATE
 -- SYNTAX
 UPDATE tableName SET column = value WHERE criteria

 -- EXAMPLES
 UPDATE class101 SET gpa = 5.0                                  -- ALL rows
 UPDATE class101 SET gpa = gpa + 1.0 WHERE name = 'Tan Ah Teck' -- Selected rows

CREATE TABLE
 -- SYNTAX
 CREATE TABLE tableName (column1Name column1Type, column2Name column2Type, ...)

 -- EXAMPLES
 CREATE TABLE class101 (id INT, name VARCHAR(50), gpa FLOAT)

DROP TABLE
 -- SYNTAX
 DROP TABLE tableName

 -- EXAMPLES
 DROP TABLE class101  -- Delete the table. Beware that there is No UNDO!!!

Notes:
 1. Case Sensitivity: SQL keywords, names (identifiers), strings may or may not be case-sensitive, depending on the implementation

  In MySQL, the keywords are NOT case-sensitive. For clarity, I show the keywords in UPPERCASE in this article.
  For programmers, it is BEST to treat the names (identifiers) and strings as case-sensitive.
 2. String: SQL strings are enclosed in single quotes.But most implementations (such as MySQL) accept both single and double quotes.






